package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
	
	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
	}
	
	public void syntax_error(Symbol cur_token) {
		report_error("\nSyntax error", cur_token);
	}
	
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
		report_fatal_error("Fatal error: parsing must be terminated", cur_token);
	}
	
	public void report_error(String message, Object info) {
		errorDetected = true;
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol)
			msg.append(" in line ").append(((Symbol)info).left);
		log.error(msg.toString());
	}
	
:}

init with {:
	errorDetected = false;
:}

terminal PROGRAM, LBRACE, RBRACE, CONST, SEMI, LPAREN, RPAREN, COMMA, EQUALS, RETURN, PLUS, MINUS, MUL, DIV, MOD, UPLUS, UMINUS, PRINT, VOID;
/* only for lexer: */
terminal IF, ELSE, BREAK, CLASS, WHILE, NEW, READ, EXTENDS, CONTINUE, FOREACH, EQ, NEQ, G, GEQ, L, LEQ, AND, OR, COLON, DOT, LBRACKET, RBRACKET, ARROW;
terminal Integer BOOL;
terminal Character CHAR;
terminal Integer NUM;
terminal String IDENT;

nonterminal MethodDeclList, ConstDeclList, ConstDecl, ConstAssignmentList, VarDeclList, VarDecl, VarDeclNameList, StatementList, Statement, DesignatorStatement, Assignop, Mulop, Addop, PrintParam;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgramName, MethodDecl, VarDeclName, ConstAssignment, MethodTypeName, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expr, Term, Factor, Const;

Program ::= (Program) PROGRAM ProgramName ConstDeclList VarDeclList LBRACE MethodDeclList RBRACE;

ProgramName ::= (ProgramName) IDENT:name;


ConstDeclList ::= (ConstDeclarations) ConstDeclList ConstDecl 
			|
			(NoConstDeclaration) /* epsilon */
			;

ConstDecl ::= (ConstDecl) CONST Type:varType ConstAssignmentList:constAssignments SEMI;

ConstAssignmentList ::= (ConstAssignments) ConstAssignmentList COMMA ConstAssignment
					|
					(OneConstAssignment) ConstAssignment
					;

ConstAssignment ::= (ConstAssignment) IDENT:constName EQUALS Const:c;


VarDeclList ::= (VarDeclarations) VarDeclList VarDecl 
			|
			(NoVarDeclaration) /* epsilon */
			;

VarDecl ::= (VarDecl) Type:varType VarDeclNameList:varNames SEMI;

VarDeclNameList ::= (VarDeclNames) VarDeclNameList COMMA VarDeclName
					|
					(OneVarDeclName) VarDeclName
					;

VarDeclName ::= (VarDeclName) IDENT:varName;				


MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDeclarations) /* epsilon */
				;
			
MethodDecl ::= (MethodDecl) VOID MethodTypeName LPAREN RPAREN VarDeclList LBRACE StatementList RBRACE;

MethodTypeName ::= (MethodTypeName) IDENT:methName;


StatementList ::= (Statements) StatementList Statement
				|
				(NoStatement) /* epsilon */
				;

Statement ::= (ErrorStatement) error SEMI:k
			{: parser.report_error("Error recovery until ; in line " + kleft, null); :}
			|
			(DesignatorSemiStatement) DesignatorStatement SEMI
			|
			(PrintStatement) PRINT LPAREN Expr PrintParam RPAREN SEMI
			;

DesignatorStatement ::= (Assignment) Designator:destination EQUALS Expr:source
						|
						(UPlusStatement) Designator UPLUS
						|
						(UMinusStatement) Designator UMINUS
						;

Expr ::= (AddopExpr) Expr Addop Term
		|
		(ExprNegTerm) MINUS Term
		|
		(ExprTerm) Term
		;

Term ::= (MulopTerm) Term Mulop Factor
		|
		(TermFactor) Factor
		;

Addop ::= (Plus) PLUS
		|
		(Minus) MINUS
		;

Mulop ::= (Mul) MUL
		|
		(Div) DIV
		|
		(Mod) MOD
		;

Factor ::= (DesignatorFactor) Designator:d
			|
			(ConstFactor) Const:c
			|
			(ParenFactor) LPAREN Expr RPAREN
			;

Designator ::= (Designator) IDENT:name;

PrintParam ::= (PrintWidth) COMMA NUM:num
			|
			(NoPrintWidth) /* epsilon */
			;

Const ::= (NumConst) NUM
		|
		(CharConst) CHAR
		|
		(BoolConst) BOOL
		;

Type ::= (Type) IDENT:typeName;